classdef ROVSimGUI < matlab.apps.AppBase
    % ROVSimGUI: Full-featured GUI for 6-DOF ROV Simulation with ANSYS Integration and Visualizations

    properties (Access = public)
        UIFigure                 matlab.ui.Figure
        LoadANSYSButton          matlab.ui.control.Button
        RunSimButton             matlab.ui.control.Button
        ResetButton              matlab.ui.control.Button
        MassEdit                 matlab.ui.control.NumericEditField
        VdispEdit                matlab.ui.control.NumericEditField
        COMTable                 matlab.ui.control.Table
        InertiaTable             matlab.ui.control.Table
        AddedMassTable           matlab.ui.control.Table
        CdATable                 matlab.ui.control.Table
        DrotTable                matlab.ui.control.Table
        ThrusterConfigTable      matlab.ui.control.Table
        GainsTable               matlab.ui.control.Table
        DesiredPoseTable         matlab.ui.control.Table
        UIAxes2D                 matlab.ui.control.UIAxes
        UIAxesThruster3D         matlab.ui.control.UIAxes
        UIAxesTrajectory3D       matlab.ui.control.UIAxes
        UIAxesHull3D             matlab.ui.control.UIAxes
    end

    properties (Access = private)
        simParams                % Simulation parameters struct
        timeVec                  % Simulation time vector
        stateHistory             % State history (12 x N)
        thrustHistory            % Thrust history (8 x N)
        faces                    % STL faces
        vertices                 % STL vertices
        tr                       % Hull transform object
    end

    methods (Access = private)
        function startup(app)
            % Load STL geometry
            scriptDir = fileparts(mfilename('fullpath'));
            stlFile = fullfile(scriptDir, '..', 'Preliminary-ROV.stl');
            if ~isfile(stlFile)
                error('STL not found: %s', stlFile);
            end
            fv_full = stlread(stlFile);
            [app.faces, verts_mm] = reducepatch(fv_full.ConnectivityList, fv_full.Points, 0.2);
            app.vertices = verts_mm * 1e-3; % mm to m

            % Initialize default parameters
            p = struct();
            p.mass = 44.05438;
            p.Vdisp = 4.4054e-2;
            p.com = [-0.42049; 0.00072; -0.02683];
            p.I = diag([1.990993, 15.350344, 15.774167]);
            p.added = diag([5, 5, 10, 1, 1, 1]);
            p.CdA = [0.5 * 1000 * 1.1 * 0.04; 0.5 * 1000 * 1.1 * 0.1; 0.5 * 1000 * 1.1 * 0.1];
            p.D_rot = diag([5, 5, 5]);
            p.Fb = 1000 * p.Vdisp * 9.81;
            p.r_pos = [0.2, 0.1, 0.1; 0.2, -0.1, 0.1; -0.2, -0.1, 0.1; -0.2, 0.1, 0.1;
                       0.2, 0.1, 0; 0.2, -0.1, 0; -0.2, -0.1, 0; -0.2, 0.1, 0];
            deg = [nan, nan, nan, nan, -45, 45, 135, -135];
            p.dir_thr = [repmat([0, 0, 1], 4, 1); [cosd(deg(5:8))', sind(deg(5:8))', zeros(4, 1)]];
            p.Kp = diag([4, 4, 4, 0.8, 0.8, 1]);
            p.Ki = diag([0.001, 0.001, 0.001, 0, 0, 0]);
            p.Kd = diag([0.6, 0.6, 0.6, 1.5, 1.5, 2]);
            p.ts = 0.1;
            p.t_final = 120;
            p.desired = [20; 20; 20; 0; 0; 0]; % Desired pose [x, y, z, roll, pitch, yaw]
            app.simParams = p;

            % Populate UI tables and fields
            app.MassEdit.Value = p.mass;
            app.VdispEdit.Value = p.Vdisp;
            app.COMTable.Data = p.com';
            app.InertiaTable.Data = diag(p.I)';
            app.AddedMassTable.Data = diag(p.added)';
            app.CdATable.Data = p.CdA';
            app.DrotTable.Data = diag(p.D_rot)';
            app.ThrusterConfigTable.Data = [p.r_pos, p.dir_thr];
            app.GainsTable.Data = [diag(p.Kp), diag(p.Ki), diag(p.Kd)];
            app.DesiredPoseTable.Data = p.desired';
        end

        function LoadANSYS(app, ~, ~)
            % Load parameters from ANSYS .mat
            [file, path] = uigetfile('*.mat', 'Select ANSYS Results File');
            if isequal(file, 0), return; end
            data = load(fullfile(path, file));
            fn = fieldnames(data);
            for k = 1:length(fn)
                if isfield(app.simParams, fn{k})
                    app.simParams.(fn{k}) = data.(fn{k});
                end
            end
            app.startup();
        end

        function RunSim(app, ~, ~)
            % Update simParams from GUI inputs
            try
                app.simParams.mass = app.MassEdit.Value;
                app.simParams.Vdisp = app.VdispEdit.Value;
                app.simParams.com = app.COMTable.Data';
                app.simParams.I = diag(app.InertiaTable.Data);
                app.simParams.added = diag(app.AddedMassTable.Data);
                app.simParams.CdA = app.CdATable.Data';
                app.simParams.D_rot = diag(app.DrotTable.Data);
                app.simParams.r_pos = app.ThrusterConfigTable.Data(:, 1:3);
                app.simParams.dir_thr = app.ThrusterConfigTable.Data(:, 4:6);
                app.simParams.Kp = diag(app.GainsTable.Data(:, 1));
                app.simParams.Ki = diag(app.GainsTable.Data(:, 2));
                app.simParams.Kd = diag(app.GainsTable.Data(:, 3));
                app.simParams.desired = app.DesiredPoseTable.Data';
            catch ME
                uialert(app.UIFigure, sprintf('Invalid input: %s', ME.message), 'Input Error');
                return;
            end

            p = app.simParams;
            N = round(p.t_final / p.ts);
            app.timeVec = (0:N-1) * p.ts;
            app.stateHistory = zeros(12, N);
            app.thrustHistory = zeros(8, N);

            % Precompute mass matrices and allocation
            try
                M = [p.mass * eye(3) + p.added(1:3,1:3), zeros(3); zeros(3), p.I + p.added(4:6,4:6)];
                invM_lin = inv(M(1:3,1:3));
                invM_ang = inv(M(4:6,4:6));
                A = zeros(6, 8);
                for i = 1:8
                    d = p.dir_thr(i, :)';
                    r = p.r_pos(i, :)';
                    A(1:3, i) = d;
                    A(4:6, i) = cross(r, d);
                end
                Q = A' * A + 1e-3 * eye(8);
                opts = optimoptions('quadprog', 'Display', 'off');
            catch ME
                uialert(app.UIFigure, sprintf('Error setting up dynamics: %s', ME.message), 'Setup Error');
                return;
            end

            % Initialize graphics
            ax2 = app.UIAxes2D; cla(ax2); hold(ax2, 'on');
            coords = {'X', 'Y', 'Z', 'Roll', 'Pitch', 'Yaw'};
            cols = {'r', 'g', 'b', 'm', 'c', 'k'};
            hPos = struct();
            for i = 1:6
                hPos.(coords{i}) = animatedline(ax2, 'Color', cols{i}, 'DisplayName', coords{i});
            end
            vcoords = {'Vx', 'Vy', 'Vz'};
            vcols = {'r', 'g', 'b'};
            hVel = struct();
            for i = 1:3
                hVel.(vcoords{i}) = animatedline(ax2, 'LineStyle', '--', 'Color', vcols{i}, 'DisplayName', vcoords{i});
            end
            acoords = {'P', 'Q', 'R'};
            acols = {'m', 'c', 'k'};
            hAng = struct();
            for i = 1:3
                hAng.(acoords{i}) = animatedline(ax2, 'LineStyle', '--', 'Color', acols{i}, 'DisplayName', acoords{i});
            end
            title(ax2, 'Simulation Results'); legend(ax2, 'show'); hold(ax2, 'off');

            axT = app.UIAxesThruster3D; cla(axT); hold(axT, 'on');
            quiv = gobjects(8, 1);
            for i = 1:8
                quiv(i) = quiver3(axT, 0, 0, 0, 0, 0, 0, 'r', 'MaxHeadSize', 0.5, 'DisplayName', sprintf('Thruster %d', i));
            end
            grid(axT, 'on'); axis(axT, 'equal'); title(axT, '3D Thruster Forces'); hold(axT, 'off');

            axTraj = app.UIAxesTrajectory3D; cla(axTraj); hold(axTraj, 'on');
            hTraj = animatedline(axTraj, 'Color', 'b', 'LineWidth', 1.5, 'DisplayName', 'Trajectory');
            plot3(axTraj, p.desired(1), p.desired(2), p.desired(3), 'rx', 'MarkerSize', 10, 'DisplayName', 'Desired Pose');
            grid(axTraj, 'on'); axis(axTraj, 'equal'); title(axTraj, 'Trajectory'); legend(axTraj, 'show'); hold(axTraj, 'off');

            axHull = app.UIAxesHull3D; cla(axHull); hold(axHull, 'on');
            app.tr = hgtransform('Parent', axHull);
            patch('Faces', app.faces, 'Vertices', app.vertices, 'FaceColor', 'cyan', 'FaceAlpha', 0.3, 'Parent', app.tr, 'DisplayName', 'ROV Hull');
            grid(axHull, 'on'); axis(axHull, 'equal'); title(axHull, '3D Hull'); legend(axHull, 'show'); hold(axHull, 'off');

            % Initialize state & control variables
            state = zeros(12, 1);
            intErr = zeros(6, 1);
            prevErr = zeros(6, 1);
            thr_e = zeros(8, 1);
            thr_a = zeros(8, 1);
            Tmax = 60;
            tau_e = 0.05;
            tau_m = 0.15;
            alpha_e = p.ts / (tau_e + p.ts);
            alpha_m = p.ts / (tau_m + p.ts);
            arwScale = 0.1;

            % Simulation loop
            tic;
            try
                for k = 2:N
                    % PID control
                    err = p.desired - state(1:6);
                    intErr = intErr + err * p.ts;
                    dErr = (err - prevErr) / p.ts;
                    prevErr = err;
                    tau = p.Kp * err + p.Ki * intErr + p.Kd * dErr;
                    tc = quadprog(Q, -A' * tau, [], [], [], [], -Tmax * ones(8, 1), Tmax * ones(8, 1), [], opts);
                    app.thrustHistory(:, k) = tc;

                    % Actuator dynamics
                    thr_e = alpha_e * tc + (1 - alpha_e) * thr_e;
                    thr_a = alpha_m * thr_e + (1 - alpha_m) * thr_a;

                    % Forces and moments
                    TF = A * thr_a;
                    F = TF(1:3) - p.CdA .* abs(state(7:9)) .* state(7:9);
                    M_t = TF(4:6) + cross(p.com, [0; 0; (p.Fb - p.mass * 9.81)]);

                    % Dynamics
                    acc_lin = invM_lin * F;
                    acc_ang = invM_ang * (M_t - p.D_rot * state(10:12));
                    state(7:9) = state(7:9) + acc_lin * p.ts;
                    state(10:12) = state(10:12) + acc_ang * p.ts;
                    state(1:3) = state(1:3) + state(7:9) * p.ts + 0.5 * acc_lin * p.ts^2;
                    state(4:6) = state(4:6) + state(10:12) * p.ts + 0.5 * acc_ang * p.ts^2;
                    app.stateHistory(:, k) = state;

                    % Update plots
                    tnow = app.timeVec(k);
                    for i = 1:6
                        addpoints(hPos.(coords{i}), tnow, state(i));
                    end
                    for i = 1:3
                        addpoints(hVel.(vcoords{i}), tnow, state(6+i));
                        addpoints(hAng.(acoords{i}), tnow, state(9+i));
                    end
                    for i = 1:8
                        pos = state(1:3) + p.r_pos(i, :)';
                        vec = p.dir_thr(i, :)' * thr_a(i) * arwScale;
                        set(quiv(i), 'XData', pos(1), 'YData', pos(2), 'ZData', pos(3), ...
                                     'UData', vec(1), 'VData', vec(2), 'WData', vec(3));
                    end
                    addpoints(hTraj, state(1), state(2), state(3));

                    % Update hull
                    phi = state(4); th = state(5); psi = state(6);
                    Rz = [cos(psi), -sin(psi), 0; sin(psi), cos(psi), 0; 0, 0, 1];
                    Ry = [cos(th), 0, sin(th); 0, 1, 0; -sin(th), 0, cos(th)];
                    Rx = [1, 0, 0; 0, cos(phi), -sin(phi); 0, sin(phi), cos(phi)];
                    R = Rz * Ry * Rx;
                    T4 = eye(4); T4(1:3, 1:3) = R; T4(1:3, 4) = state(1:3);
                    set(app.tr, 'Matrix', T4);

                    drawnow limitrate;
                    elapsed = toc;
                    wait = tnow - elapsed;
                    if wait > 0, pause(wait); end
                end
                uialert(app.UIFigure, 'Simulation completed successfully.', 'Success', 'Icon', 'success');
            catch ME
                uialert(app.UIFigure, sprintf('Simulation error: %s', ME.message), 'Error', 'Icon', 'error');
            end
        end

        function Reset(app, ~, ~)
            cla(app.UIAxes2D);
            cla(app.UIAxesThruster3D);
            cla(app.UIAxesTrajectory3D);
            cla(app.UIAxesHull3D);
            app.stateHistory = [];
            app.thrustHistory = [];
            app.timeVec = [];
            app.startup();
        end
    end

    methods (Access = private)
        function createComponents(app)
            app.UIFigure = uifigure('Name', 'ROV Simulation Platform', 'Position', [100 100 1400 900]);

            % Control Buttons
            app.LoadANSYSButton = uibutton(app.UIFigure, 'Text', 'Load ANSYS', 'Position', [20 860 100 30], ...
                                           'ButtonPushedFcn', @(s, e) app.LoadANSYS(s, e));
            app.RunSimButton = uibutton(app.UIFigure, 'Text', 'Run Sim', 'Position', [140 860 100 30], ...
                                        'ButtonPushedFcn', @(s, e) app.RunSim(s, e));
            app.ResetButton = uibutton(app.UIFigure, 'Text', 'Reset', 'Position', [260 860 100 30], ...
                                       'ButtonPushedFcn', @(s, e) app.Reset(s, e));

            % Inputs
            app.MassEdit = uieditfield(app.UIFigure, 'numeric', 'Position', [20 820 100 22], 'Value', 44.05438, ...
                                       'Limits', [0 Inf], 'Tooltip', 'Mass (kg)');
            app.VdispEdit = uieditfield(app.UIFigure, 'numeric', 'Position', [140 820 100 22], 'Value', 4.4054e-2, ...
                                        'Limits', [0 Inf], 'Tooltip', 'Displaced Volume (m^3)');
            app.COMTable = uitable(app.UIFigure, 'Position', [20 690 260 50], 'ColumnName', {'COM X', 'COM Y', 'COM Z'}, ...
                                   'ColumnEditable', true, 'Data', [-0.42049, 0.00072, -0.02683]);
            app.InertiaTable = uitable(app.UIFigure, 'Position', [20 610 260 50], 'ColumnName', {'Ixx', 'Iyy', 'Izz'}, ...
                                       'ColumnEditable', true, 'Data', [1.990993, 15.350344, 15.774167]);
            app.AddedMassTable = uitable(app.UIFigure, 'Position', [20 530 360 50], 'ColumnName', {'Am11', 'Am22', 'Am33', 'Am44', 'Am55', 'Am66'}, ...
                                         'ColumnEditable', true, 'Data', [5, 5, 10, 1, 1, 1]);
            app.CdATable = uitable(app.UIFigure, 'Position', [20 450 260 50], 'ColumnName', {'CdAx', 'CdAy', 'CdAz'}, ...
                                   'ColumnEditable', true, 'Data', [0.5 * 1000 * 1.1 * 0.04, 0.5 * 1000 * 1.1 * 0.1, 0.5 * 1000 * 1.1 * 0.1]);
            app.DrotTable = uitable(app.UIFigure, 'Position', [20 370 260 50], 'ColumnName', {'Dr11', 'Dr22', 'Dr33'}, ...
                                    'ColumnEditable', true, 'Data', [5, 5, 5]);
            app.ThrusterConfigTable = uitable(app.UIFigure, 'Position', [300 550 420 260], ...
                                              'ColumnName', {'rX', 'rY', 'rZ', 'dX', 'dY', 'dZ'}, 'ColumnEditable', true);
            app.GainsTable = uitable(app.UIFigure, 'Position', [300 350 420 180], ...
                                     'ColumnName', {'Kp', 'Ki', 'Kd'}, 'RowName', {'X', 'Y', 'Z', 'Roll', 'Pitch', 'Yaw'}, ...
                                     'ColumnEditable', true);
            app.DesiredPoseTable = uitable(app.UIFigure, 'Position', [20 290 360 50], 'ColumnName', {'X', 'Y', 'Z', 'Roll', 'Pitch', 'Yaw'}, ...
                                           'ColumnEditable', true, 'Data', [20, 20, 20, 0, 0, 0]);

            % Axes Layout
            app.UIAxes2D = uiaxes(app.UIFigure, 'Position', [750 520 620 340], 'Box', 'on');
            title(app.UIAxes2D, '2D Plots');
            app.UIAxesThruster3D = uiaxes(app.UIFigure, 'Position', [20 20 420 340], 'Box', 'on');
            title(app.UIAxesThruster3D, '3D Thruster Forces');
            app.UIAxesTrajectory3D = uiaxes(app.UIFigure, 'Position', [460 20 420 340], 'Box', 'on');
            title(app.UIAxesTrajectory3D, 'Trajectory');
            app.UIAxesHull3D = uiaxes(app.UIFigure, 'Position', [900 20 420 340], 'Box', 'on');
            title(app.UIAxesHull3D, '3D Hull');
        end
    end

    methods (Access = public)
        function app = ROVSimGUI
            createComponents(app);
            startup(app);
        end
        function delete(app)
            delete(app.UIFigure);
        end
    end
end